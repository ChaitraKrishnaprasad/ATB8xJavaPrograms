{
	"info": {
		"_postman_id": "8ed8bbfc-3657-4391-8d59-d03bb68bb8d6",
		"name": "Project#6 | Task Nov 20 2024",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28398995",
		"_collection_link": "https://api-testing-team-9258.postman.co/workspace/API-Testing-Team-Workspace~97352bd9-bc71-4954-9b4d-14d01b6ac5c1/collection/28398995-8ed8bbfc-3657-4391-8d59-d03bb68bb8d6?action=share&source=collection_link&creator=28398995"
	},
	"item": [
		{
			"name": "CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains a token or authentication key\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.have.property('token').that.is.a('string').and.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the response schema for the token or authentication key field\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('token');\r",
							"  pm.expect(responseData.token).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate response contains token\", function () {\r",
							"    let responseData;\r",
							"\r",
							"    try {\r",
							"        responseData = pm.response.json();\r",
							"    } catch (e) {\r",
							"        console.log(\"Error parsing JSON:\", e);\r",
							"        responseData = {};\r",
							"    }\r",
							"\r",
							"    pm.expect(responseData).to.be.an(\"object\", \"Response is not a valid JSON object\");\r",
							"    pm.expect(responseData).to.have.property(\"token\"); // Validate token exists\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				},
				"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/auth \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "Create a Booking (id)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 20200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(20200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an(\"array\", \"Response should be an array\");\r",
							"\r",
							"    // Ensure the array is not empty\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response array is empty\");\r",
							"\r",
							"    // Validate the structure of the first item in the array\r",
							"    const firstBooking = responseData[0];\r",
							"\r",
							"    pm.expect(firstBooking).to.be.an(\"object\");\r",
							"    pm.expect(firstBooking).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the response contains the required booking details\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an(\"array\", \"Response should be an array\");\r",
							"\r",
							"    // Ensure the array is not empty\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response array is empty\");\r",
							"\r",
							"    const firstBooking = responseData[0]; // Get the first booking\r",
							"\r",
							"    pm.expect(firstBooking).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the response body\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an(\"array\", \"Response should be an array\");\r",
							"\r",
							"    // Ensure the array is not empty\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response array is empty\");\r",
							"\r",
							"    // Validate the structure of the first item in the array\r",
							"    const firstBooking = responseData[0];\r",
							"\r",
							"    pm.expect(firstBooking).to.be.an(\"object\");\r",
							"    pm.expect(firstBooking).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify the response contains the required booking details\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an(\"array\", \"Response should be an array\");\r",
							"\r",
							"    // Ensure the array is not empty\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0, \"Response array is empty\");\r",
							"\r",
							"    const firstBooking = responseData[0]; // Get the first booking\r",
							"\r",
							"    pm.expect(firstBooking).to.have.property(\"bookingid\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				},
				"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking\r\n"
			},
			"response": []
		},
		{
			"name": "GetBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Booking details are present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an(\"object\", \"Response should be an object\");\r",
							"\r",
							"    pm.expect(responseData).to.have.property(\"firstname\");\r",
							"    pm.expect(responseData).to.have.property(\"lastname\");\r",
							"    pm.expect(responseData).to.have.property(\"totalprice\");\r",
							"    pm.expect(responseData).to.have.property(\"depositpaid\");\r",
							"    pm.expect(responseData).to.have.property(\"bookingdates\");\r",
							"    pm.expect(responseData.bookingdates).to.be.an(\"object\", \"Booking dates should be an object\");\r",
							"    pm.expect(responseData.bookingdates).to.have.property(\"checkin\");\r",
							"    pm.expect(responseData.bookingdates).to.have.property(\"checkout\");\r",
							"    pm.expect(responseData).to.have.property(\"additionalneeds\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Additional needs field is present and has a valid value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('additionalneeds').that.is.a('string').and.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is present and has value 'application/json; charset=utf-8'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Server header is present and has a value\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Server\")).to.exist;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				},
				"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking/1\r\n"
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has all the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an(\"object\");\r",
							"    pm.expect(responseData).to.have.property(\"bookingid\");\r",
							"    pm.expect(responseData).to.have.property(\"booking\");\r",
							"    pm.expect(responseData.booking).to.be.an(\"object\");\r",
							"\r",
							"    pm.expect(responseData.booking).to.have.property(\"firstname\");\r",
							"    pm.expect(responseData.booking).to.have.property(\"lastname\");\r",
							"    pm.expect(responseData.booking).to.have.property(\"totalprice\");\r",
							"    pm.expect(responseData.booking).to.have.property(\"depositpaid\");\r",
							"    pm.expect(responseData.booking).to.have.property(\"bookingdates\");\r",
							"    pm.expect(responseData.booking.bookingdates).to.be.an(\"object\");\r",
							"    pm.expect(responseData.booking.bookingdates).to.have.property(\"checkin\");\r",
							"    pm.expect(responseData.booking.bookingdates).to.have.property(\"checkout\");\r",
							"\r",
							"    // Additional needs might be optional\r",
							"    if (responseData.booking.hasOwnProperty(\"additionalneeds\")) {\r",
							"        pm.expect(responseData.booking.additionalneeds).to.be.a(\"string\");\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Bookingdates object contains valid checkin and checkout dates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property(\"booking\");\r",
							"    pm.expect(responseData.booking).to.be.an(\"object\");\r",
							"\r",
							"    pm.expect(responseData.booking).to.have.property(\"bookingdates\");\r",
							"    pm.expect(responseData.booking.bookingdates).to.be.an(\"object\");\r",
							"\r",
							"    pm.expect(responseData.booking.bookingdates).to.have.property(\"checkin\").and.to.match(/\\d{4}-\\d{2}-\\d{2}/, \"Checkin date should be in YYYY-MM-DD format\");\r",
							"    pm.expect(responseData.booking.bookingdates).to.have.property(\"checkout\").and.to.match(/\\d{4}-\\d{2}-\\d{2}/, \"Checkout date should be in YYYY-MM-DD format\");\r",
							"});\r",
							"\r",
							"pm.test(\"Firstname and lastname must be non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    // Ensure `booking` exists before accessing firstname and lastname\r",
							"    pm.expect(responseData).to.have.property(\"booking\");\r",
							"    pm.expect(responseData.booking).to.be.an(\"object\");\r",
							"\r",
							"    // Validate `firstname`\r",
							"    pm.expect(responseData.booking).to.have.property(\"firstname\");\r",
							"    pm.expect(responseData.booking.firstname).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Firstname should not be empty\");\r",
							"\r",
							"    // Validate `lastname`\r",
							"    pm.expect(responseData.booking).to.have.property(\"lastname\");\r",
							"    pm.expect(responseData.booking.lastname).to.be.a(\"string\").and.to.have.lengthOf.at.least(1, \"Lastname should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Totalprice is a positive integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    // Ensure `booking` exists before checking `totalprice`\r",
							"    pm.expect(responseData).to.have.property(\"booking\");\r",
							"    pm.expect(responseData.booking).to.be.an(\"object\");\r",
							"\r",
							"    // Check if `totalprice` exists before running assertions\r",
							"    pm.expect(responseData.booking).to.have.property(\"totalprice\");\r",
							"    pm.expect(responseData.booking.totalprice).to.be.a(\"number\");\r",
							"    pm.expect(responseData.booking.totalprice).to.be.above(0, \"Totalprice should be a positive integer\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				},
				"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200); // Ensure we proceed only if the response is 200\r",
							"\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('firstname');\r",
							"    pm.expect(responseData).to.have.property('lastname');\r",
							"    pm.expect(responseData).to.have.property('totalprice');\r",
							"    pm.expect(responseData).to.have.property('depositpaid');\r",
							"    pm.expect(responseData).to.have.property('bookingdates');\r",
							"    pm.expect(responseData).to.have.property('additionalneeds');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Checkin date is before the checkout date\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.bookingdates.checkin).to.be.a('string').and.to.be.below(responseData.bookingdates.checkout);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Additionalneeds is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.additionalneeds).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Booking dates have valid date format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.bookingdates).to.be.an('object');\r",
							"    pm.expect(responseData.bookingdates.checkin).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"    pm.expect(responseData.bookingdates.checkout).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"});\r",
							"\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>Status</th>\r",
							"        <th>Content-Type</th>\r",
							"        <th>Response</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>403</td>\r",
							"        <td>text/plain</td>\r",
							"        <td>Forbidden</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return {\r",
							"        response: {\r",
							"            status: 403,\r",
							"            contentType: \"text/plain\",\r",
							"            responseBody: \"Forbidden\"\r",
							"        }\r",
							"    };\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				},
				"description": "Generated from cURL: curl -X PUT \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 2000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 403\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required Content-Type header with value 'text/plain'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"text/plain\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains the message 'Forbidden'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Request body contains the expected fields - firstname and lastname\", function () {\r",
							"    const expectedFields = [\"firstname\", \"lastname\"];\r",
							"    const requestBody = pm.request.body.json();\r",
							"\r",
							"    expectedFields.forEach(field => {\r",
							"        pm.expect(requestBody).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				},
				"description": "Generated from cURL: curl -X PATCH \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "Delete Id -> 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 403\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is 'text/plain'\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equal('text/plain');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains the message 'Forbidden'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify that the request method is 'DELETE'\", function () {\r",
							"    pm.expect(pm.request.method).to.equal('DELETE');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Request headers contain 'Content-Type: application/json' and 'Cookie: token=abc123'\", function () {\r",
							"    pm.expect(pm.request.headers.get('Content-Type')).to.equal('application/json');\r",
							"    pm.expect(pm.request.headers.get('Cookie')).to.equal('token=abc123');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					}
				],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/1",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"1"
					]
				},
				"description": "Generated from cURL: curl -X DELETE \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Cookie: token=abc123'"
			},
			"response": []
		}
	]
}